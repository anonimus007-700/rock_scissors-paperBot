from aiogram import Bot, types
from aiogram.utils import executor
from aiogram.dispatcher import Dispatcher
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

import random
import sqlite3
from datetime import datetime

from config import TOKEN
from kb import *

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

bd = sqlite3.connect('database.db')
cursor = bd.cursor()


class Form(StatesGroup):
    gesture = State()
    bank = State()
    get_credit = State()

items = {
    "‚úä": "‚úåÔ∏è",
    "‚úåÔ∏è": "‚úã",
    "‚úã": "‚úä"
}

list = list(items.keys())


@dp.message_handler(commands=["self_photo"])
async def user_photo(message):
    photo = await bot.get_user_profile_photos(user_id=1344795663)
    await bot.send_photo(message.chat.id, photo.photos[0][2].file_id)

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    usern = message.from_user.username
    cursor.execute(f"""CREATE TABLE IF NOT EXISTS {usern}(
        cash INT,
        diamond INT,
        count1 INT,
        count2 INT,
        count3 INT,
        count4 INT,
        achi1 TEXT,
        achi2 TEXT,
        achi3 TEXT,
        achi4 TEXT,
        credit INT,
        count_credit INT,
        date INT
    )""")
    bd.commit()
    
    cursor.execute(f"SELECT * FROM {usern}")
    fetc = cursor.fetchall()
    
    if len(fetc) == 0:
        cursor.execute(f"""INSERT INTO {usern}(
                cash,
                diamond,
                count1,
                count2,
                count3,
                count4,
                achi1,
                achi2,
                achi3,
                achi4,
                credit,
                count_credit,
                date)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)""",
                (200,
                0,
                0,
                0,
                0,
                0,
                "–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω–æ",
                "–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω–æ",
                "–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω–æ",
                "–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω–æ",
                0,
                0,
                0,)
            )
        bd.commit()
        
    cursor.execute(f"SELECT * FROM {usern}")
    fetc = cursor.fetchall()

    await bot.send_message(message.from_user.id, f"–í–∞—Å –≤—ñ—Ç–∞—Ç–∞—î –≥—Ä–∞ \"–ö–∞–º—ñ–Ω—å –ù–æ–∂–∏—Ü—ñ –ü–∞–ø—ñ—Ä\"")
    await bot.send_message(message.from_user.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å:\n{fetc[0][0]}üíµ\n{fetc[0][1]}üíé", reply_markup=men)


@dp.message_handler()
async def game_menu(message: types.Message):
    cursor.execute(f"SELECT * FROM {message.from_user.username}")
    fetch = cursor.fetchall()
    dt = datetime.now()

    def update_progress():
        """–û–Ω–æ–≤–ª—è—î–º–æ –ø—Ä–æ–≥—Ä–µ—Å –≥—Ä–∞–≤—Ü—è"""
        global achi1, achi2, achi3, achi4
        global count1, count2, count3, count4
        global cash, diamond

        usern = message.from_user.username
        cursor.execute(f"SELECT * FROM {usern}")
        fetc = cursor.fetchall()
        
        cash = fetc[0][0]
        diamond = fetc[0][1]
        
        achi1 = fetc[0][6]
        achi2 = fetc[0][7]
        achi3 = fetc[0][8]
        achi4 = fetc[0][9]
        
        count1 = fetc[0][2]
        count2 = fetc[0][3]
        count3 = fetc[0][4]
        count4 = fetc[0][5]

    def update_achi():
        """–û–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ—Å—è–≥–Ω–µ–Ω—å"""
        global achi1, achi2, achi3, achi4
        global diamond
        global count1, count2, count3, count4
        
        if cash >= 500 and count4 == 0:
            cursor.execute(f"UPDATE {message.from_user.username} SET achi4 == '–≤–∏–∫–æ–Ω–∞–Ω–Ω–æ'")
            cursor.execute(f"UPDATE {message.from_user.username} SET count4 == 1")
            cursor.execute(f"UPDATE {message.from_user.username} SET diamond == diamond + 5")
            bd.commit()
        elif cash < 500 and count4 == 1:
            cursor.execute(f"UPDATE {message.from_user.username} SET achi4 == '–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω–æ'")
            cursor.execute(f"UPDATE {message.from_user.username} SET count4 == 0")
            cursor.execute(f"UPDATE {message.from_user.username} SET diamond == diamond - 5")
            bd.commit()
            
        if cash >= 750 and count3 == 0:
            cursor.execute(f"UPDATE {message.from_user.username} SET achi3 == '–≤–∏–∫–æ–Ω–∞–Ω–Ω–æ'")
            cursor.execute(f"UPDATE {message.from_user.username} SET count3 == 1")
            cursor.execute(f"UPDATE {message.from_user.username} SET diamond == diamond + 10")
            bd.commit()
        elif cash < 750 and count3 == 1:
            cursor.execute(f"UPDATE {message.from_user.username} SET achi3 == '–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω–æ'")
            cursor.execute(f"UPDATE {message.from_user.username} SET count3 == 0")
            cursor.execute(f"UPDATE {message.from_user.username} SET diamond == diamond - 10")
            bd.commit()
            
        if cash >= 1000 and count2 == 0:
            cursor.execute(f"UPDATE {message.from_user.username} SET achi2 == '–≤–∏–∫–æ–Ω–∞–Ω–Ω–æ'")
            cursor.execute(f"UPDATE {message.from_user.username} SET count2 == 1")
            cursor.execute(f"UPDATE {message.from_user.username} SET diamond == diamond + 20")
            bd.commit()
        elif cash < 1000 and count2 == 1:
            cursor.execute(f"UPDATE {message.from_user.username} SET achi2 == '–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω–æ'")
            cursor.execute(f"UPDATE {message.from_user.username} SET count2 == 0")
            cursor.execute(f"UPDATE {message.from_user.username} SET diamond == diamond - 20")
            bd.commit()
            
        if cash >= 1500 and count1 == 0:
            cursor.execute(f"UPDATE {message.from_user.username} SET achi1 == '–≤–∏–∫–æ–Ω–∞–Ω–Ω–æ'")
            cursor.execute(f"UPDATE {message.from_user.username} SET count1 == 1")
            cursor.execute(f"UPDATE {message.from_user.username} SET diamond == diamond + 50")
            bd.commit()
        elif cash < 1500 and count1 == 1:
            cursor.execute(f"UPDATE {message.from_user.username} SET achi1 == '–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω–æ'")
            cursor.execute(f"UPDATE {message.from_user.username} SET count1 == 0")
            cursor.execute(f"UPDATE {message.from_user.username} SET diamond == diamond - 50")
            bd.commit()


    if fetch[0][12] != 0 and fetch[0][12] != dt.day:
        credit = fetch[0][10]
        credit = credit / 4
        await bot.send_message(message.from_user.id, f"–ó –≤–∞—à–æ–≥–æ —Ä–∞—Ö—É–Ω–∫—É –±–æ–ª–æ –∑–Ω—è—Ç–æ –≤—ñ—Ç—Å–æ—Ç–∫—ñ –ø–æ –∫—Ä–µ–¥–∏—Ç—É: \
{credit}üíµ\n\n–ë—É—Ç—å –ª–∞—Å–∫–∞ –≤–∏–ø–ª–∞—Ç—ñ—Ç—å –∫—Ä–µ–¥–∏—Çüòä:\n–í–∞—à–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å: {fetch[0][10]}üíµ")
        cursor.execute(f"UPDATE {message.from_user.username} SET cash == cash - {credit}")
        cursor.execute(f"UPDATE {message.from_user.username} SET date == {dt.day}")


    update_progress()
    update_achi()


    if message.text == "–ì—Ä–∞—Ç–∏ –Ω–∞ 50üíµ" and cash >= 50:
        await Form.gesture.set()
        await bot.send_message(message.from_user.id, "–í–∏–±–µ—Ä—ñ—Ç—å –∂–µ—Å—Ç:", reply_markup=button)
        
    elif message.text == "–ì—Ä–∞—Ç–∏ –Ω–∞ 50üíµ" and cash < 50:
        await bot.send_message(message.from_user.id, "–í–∏–±–∞—á—Ç–µ —É –≤–∞—Å –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –≥—Ä–æ—à–µ–πüò¢")
        
    elif message.text == "–ù–µ –≥—Ä–∞—Ç–∏ –±—ñ–ª—å—à–µ":
        await bot.send_message(message.from_user.id, "–ú–µ–Ω—é:", reply_markup=men)
        
    elif message.text == "–ë–∞–ª–∞–Ω—Åüí≥":
        update_progress()
        update_achi()
        await bot.send_message(message.from_user.id, f"–í–∞—à –±–∞–ª–∞–Ω—Å:\n{cash}üíµ\n{diamond}üíé")

    elif message.text == "–î–æ—Å—è–≥–Ω–µ–Ω–Ω—èüìà":
        update_progress()
        update_achi()
        await bot.send_message(message.from_user.id, f"üèÜ–ó–∞—Ä–æ–±–∏—Ç–∏ 1500üíµ - {achi1} +50üíé\n\
ü•á–ó–∞—Ä–æ–±–∏—Ç–∏ 1000üíµ - {achi2} +20üíé\nü•à–ó–∞—Ä–æ–±–∏—Ç–∏ 750üíµ - {achi3} +10üíé\n\
ü•â–ó–∞—Ä–æ–±–∏—Ç–∏ 500üíµ - {achi4} +5üíé")

    elif message.text == "üí∏–ï–∫—Å—Ç—Ä–∞ –≥—Ä–æ—à—ñüíµ" and fetch[0][11] == 1 and fetch[0][0] <= 50:
        cursor.execute(f"UPDATE {message.from_user.username} SET cash = 100")
        bd.commit()
        await bot.send_message(message.from_user.id, "–§—É–Ω–∫—Ü—ñ—è üí∏–ï–∫—Å—Ç—Ä–∞ –≥—Ä–æ—à—ñüíµ –¥–æ–ø–æ–º–æ–∂–µ —É –∫—Ä–∏—Ç–∏—á–Ω—ñ–π —Å–∏—Ç—É–∞—Ü—ñ—óüòÖ")

    elif message.text == "üí∏–ï–∫—Å—Ç—Ä–∞ –≥—Ä–æ—à—ñüíµ" and fetch[0][0] > 50:
        await bot.send_message(message.from_user.id, """–§—É–Ω–∫—Ü—ñ—è üí∏–ï–∫—Å—Ç—Ä–∞ –≥—Ä–æ—à—ñüíµ –¥–∞—î –≤–∞–º 2-–π —à–∞–Ω—Å.

–Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?
–ö–æ–ª–∏ –Ω–∞ –≤–∞—à–æ–º—É –±–∞–ª–∞–Ω—Å—ñ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó –∫–æ–ø—ñ–π–∫–∏ —Ç–∞ –≤–∏ –≤–∑–∏–ª–∏ –∫—Ä–µ–¥–∏—Ç —Ü—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–∞—Å—Ç—å –≤–∞–º —Å—Ç—ñ–ª—å–∫–∏ üíµ —Å–∫—ñ–ª—å–∫–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ, \
—â–æ–± –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ –±—É–ª–æ 100üíµ""")

    elif message.text == "–ë–∞–Ω–∫üè¶":
        usern = message.from_user.username
        cursor.execute(f"SELECT * FROM {usern}")
        fetc = cursor.fetchall()

        await Form.bank.set()
        await bot.send_message(message.from_user.id, "–£ –±–∞–Ω–∫—Éüè¶ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç–∏ –∫—Ä–µ–¥–∏—Ç, \
–∞–ª–µ —è–∫—â–æ –≤–∏ –Ω–µ –≤—ñ–¥–¥–∞—Å—Ç–µ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å –¥–æ –Ω–∞—Å—Ç–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –¥–æ–±–∏(–¥–æ 00:00) —É –≤–∞—Å –±—É–¥–µ –∑–Ω—è—Ç–æ 25% üíµ —è–∫—ñ –≤–∏ –∑–∞–±–æ—Ä–≥—É–≤–∞–ª–∏",
                             reply_markup=bank_b)
        
        await bot.send_message(message.from_user.id, f"–í–∞—à–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å:\n{fetc[0][10]}üíµ")

    elif message.text == "–ü—Ä–∞–≤–∏–ª–∞üìí":
        await bot.send_message(message.from_user.id, """–Ø–∫—ñ–π –∂–µ—Å—Ç —á–æ–º—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î:
‚úåÔ∏è - –Ω–æ–∂–∏—Ü—ñ
‚úã - –ø–∞–ø—ñ—Ä
‚úä - –∫–∞–º—ñ–Ω—å

–ì—Ä–∞ –∫–∞–º—ñ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ñ –ø–∞–ø—ñ—Ä –¥—É–∂–µ –ø—Ä–æ—Å—Ç–∞.
–Ø–∫—â–æ ‚úåÔ∏è –ø—Ä–æ—Ç–∏ ‚úã, —Ç–æ –Ω–æ–∂–∏—Ü—ñ —Ä—ñ–∂—É—Ç—å –ø–∞–ø—ñ—Ä.
–Ø–∫—â–æ ‚úã –ø—Ä–æ—Ç–∏ ‚úä, —Ç–æ –ø–∞–ø—ñ—Ä –Ω–∞–∫—Ä–∏–≤–∞—î –∫–∞–º—ñ–Ω—å.
–Ø–∫—â–æ ‚úä –ø—Ä–æ—Ç–∏ ‚úåÔ∏è, —Ç–æ –∫–∞–º—ñ–Ω—å –ø–µ—Ä–µ–±–∏–≤–∏—î –Ω–æ–∂–∏—Ü—ñ.

–£ —Ç—ñ–ª—å–∫–∏ —Ü—å–æ–º—É –±–æ—Ç—ñ –≤–∏ –º–æ–∂–µ—Ç–µ –≤–∑—è—Ç–∏ —Ç–∞ –ø–æ–≥–∞—Å–∏—Ç–∏ –π–æ–≥–æ
""")

    else:
        await bot.send_message(message.from_user.id, "–í–∏–±–∞—á—Ç–µ –∞–ª–µ —è –≤–∞—Å –Ω–µ —Ä–æ–∑—É–º—ñ—éüòû", reply_markup=men)


@dp.message_handler(state=Form.gesture)
async def process_game(message: types.Message, state: FSMContext):
    def update_balance():
        """–û–Ω–æ–≤–ª—è—î–º–æ –±–∞–ª–∞–Ω—Å –≥—Ä–∞–≤—Ü—è"""
        global cash
        
        usern = message.from_user.username
        cursor.execute(f"SELECT * FROM {usern}")
        fetc = cursor.fetchall()
        
        cash = fetc[0][0]
    
    rand = random.choice(list)
    user = message.text

    if user == "üñï":
        await bot.send_message(message.from_user.id, f"–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {message.from_user.first_name} +50üíµ\n\
–ü—Ä–æ—Ç–∏ —Ñ–∞–∫–∞ –Ω–µ–º–∞—î –∑–Ω–∞–∫–∞üòé")
        
        cursor.execute(f"UPDATE {message.from_user.username} SET cash == cash + 50")
        bd.commit()
        
        update_balance()
        
        await bot.send_message(message.from_user.id, f"–ë–û–¢ : {rand}\n\
{message.from_user.first_name} : {message.text}\n\n–í–∞—à –±–∞–ª–∞–Ω—Å:\n{cash}üíµ")
        await bot.send_message(message.from_user.id, "–ë–∞–∂–∞—î—Ç–µ –∑—ñ–≥—Ä–∞—Ç–∏ –Ω–∞ 50üíµ —â–µ —Ä–∞–∑?", reply_markup=menu_but)
        await state.finish()

    elif rand == user:
        await bot.send_message(message.from_user.id, "–ù—ñ—á—ñ—è\n–ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –≥—Ä–∞—Ç–∏")
        await bot.send_message(message.from_user.id, f"–ë–û–¢ : {rand}\n\
{message.from_user.first_name} : {message.text}\n\n–í–∞—à –±–∞–ª–∞–Ω—Å:\n{cash}üíµ")

    for i, j in items.items():
        if rand == i and user == j:
            await bot.send_message(message.from_user.id, "–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: –ë–û–¢ +50üíµ")
            
            cursor.execute(f"UPDATE {message.from_user.username} SET cash == cash - 50")
            bd.commit()
        
            update_balance()
            
            await bot.send_message(message.from_user.id, f"–ë–û–¢ : {rand}\n\
{message.from_user.first_name} : {message.text}\n\n–í–∞—à –±–∞–ª–∞–Ω—Å:\n{cash}üíµ")
            await bot.send_message(message.from_user.id, "–ë–∞–∂–∞—î—Ç–µ –∑—ñ–≥—Ä–∞—Ç–∏ –Ω–∞ 50üíµ —â–µ —Ä–∞–∑?", reply_markup=menu_but)
            await state.finish()
            break
        
        elif user == i and rand == j:
            await bot.send_message(message.from_user.id, f"–ü–µ—Ä–µ–º–æ–∂–µ—Ü—å: {message.from_user.first_name} +50üíµ")
            
            cursor.execute(f"UPDATE {message.from_user.username} SET cash == cash + 50")
            bd.commit()
        
            update_balance()
            
            await bot.send_message(message.from_user.id, f"–ë–û–¢ : {rand}\n\
{message.from_user.first_name} : {message.text}\n\n–í–∞—à –±–∞–ª–∞–Ω—Å:\n{cash}üíµ")
            await bot.send_message(message.from_user.id, "–ë–∞–∂–∞—î—Ç–µ –∑—ñ–≥—Ä–∞—Ç–∏ –Ω–∞ 50üíµ —â–µ —Ä–∞–∑?", reply_markup=menu_but)
            await state.finish()
            break


@dp.message_handler(state=Form.bank)
async def bank_menu(message: types.Message, state: FSMContext):
    usern = message.from_user.username
    cursor.execute(f"SELECT * FROM {usern}")
    fetc = cursor.fetchall()


    if message.text == "–í–∑—è—Ç–∏ –∫—Ä–µ–¥–∏—Çüí∞" and fetc[0][11] != 1:
        await bot.send_message(message.from_user.id, "–í–≤–µ–¥—ñ—Ç—å —Å—É–º—É üíµ –Ω–∞ —è–∫—É –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∑—è—Ç–∏ –∫—Ä–µ–¥–∏—Ç",
                               reply_markup=credit_b)
        await Form.get_credit.set()
    
    elif message.text == "–í–∑—è—Ç–∏ –∫—Ä–µ–¥–∏—Çüí∞" and fetc[0][11] == 1:
        await bot.send_message(message.from_user.id, "–°–ø–µ—Ä—à—É –ø–æ–≥–∞—Å—ñ—Ç—å –∫—Ä–µ–¥–∏—Ç —â–æ–± –≤–∑—è—Ç–∏ –Ω–æ–≤–∏–πüòä")
        
    if message.text == "–í—ñ–¥–¥–∞—Ç–∏ –∫—Ä–µ–¥–∏—Çüí∞" and fetc[0][11] == 1 and fetc[0][10] <= cash:
        await bot.send_message(message.from_user.id, "–ö—Ä–µ–¥–∏—Ç –ø–æ–≥–∞—à–Ω–æüòä")
        cursor.execute(f"UPDATE {message.from_user.username} SET credit == 0")
        cursor.execute(f"UPDATE {message.from_user.username} SET cash == cash - {fetc[0][10]}")
        cursor.execute(f"UPDATE {message.from_user.username} SET count_credit == 0")
        cursor.execute(f"UPDATE {message.from_user.username} SET date == 0")
        bd.commit()
    
    elif message.text == "–í—ñ–¥–¥–∞—Ç–∏ –∫—Ä–µ–¥–∏—Çüí∞" and fetc[0][11] == 1 and fetc[0][10] > cash:
        await bot.send_message(message.from_user.id, "–í–∏–±–∞—á—Ç–µ –∞–ª–µ —É –≤–∞—Å –Ω–µ –≤–∏—Å—Ç–∞—á–∞—î –≥—Ä–æ—à–µ–π —â–æ–± –ø–æ–≥–∞—Å–∏—Ç–∏ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—åüòû")
        await bot.send_message(message.from_user.id, f"–í–∞—à–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å:\n{fetc[0][10]}üíµ")
        

    elif message.text == "–í—ñ–¥–¥–∞—Ç–∏ –∫—Ä–µ–¥–∏—Çüí∞" and fetc[0][11] == 0:
        await bot.send_message(message.from_user.id, "–£ –≤–∞—Å –Ω–µ –º–∞—î –∫—Ä–µ–¥–∏—Ç—Éüëç")
        

    if message.text == "–ù–∞–∑–∞–¥‚¨ÖÔ∏è":
        await bot.send_message(message.from_user.id, "–ú–µ–Ω—é:", reply_markup=men)
        await state.finish()


@dp.message_handler(state=Form.get_credit)
async def bank_menu(message: types.Message, state: FSMContext):
    if message.text != "–ù–∞–∑–∞–¥‚¨ÖÔ∏è":
        dt = datetime.now()
        cursor.execute(f"UPDATE {message.from_user.username} SET credit == {message.text}")
        cursor.execute(f"UPDATE {message.from_user.username} SET cash == cash + {message.text}")
        cursor.execute(f"UPDATE {message.from_user.username} SET count_credit == 1")
        cursor.execute(f"UPDATE {message.from_user.username} SET date == {dt.day}")
        bd.commit()

        cursor.execute(f"SELECT * FROM {message.from_user.username}")
        fetc = cursor.fetchall()

        await bot.send_message(message.from_user.id, "–ö—Ä–µ–¥–∏—Ç –≤–∑—è—Ç–æ", reply_markup=bank_b)
        await bot.send_message(message.from_user.id, f"–í–∞—à–∞ –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω—ñ—Å—Ç—å:\n{fetc[0][10]}üíµ")

        await state.finish()
        await Form.bank.set()
    else:
        await bot.send_message(message.from_user.id, "–ö—Ä–µ–¥–∏—Ç - —Ü–µ –∑–ª–æüòÖ", reply_markup=bank_b)
        await state.finish()
        await Form.bank.set()

if __name__ == '__main__':
    executor.start_polling(dp)
